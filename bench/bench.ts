import { webp_to_png } from "../main.ts";
import sharp from "npm:sharp";

async function sharp_webp_to_png(webpdata: Uint8Array) {
  try {
    const png_data = await sharp(webpdata).png().toBuffer();
    return new Uint8Array(png_data);
  } catch (error) {
    console.error("Error converting image:", error);
  }
}

const webp_data = new Uint8Array([
  0x52, 0x49, 0x46, 0x46, 0xd8, 0x02, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50, 0x56,
  0x50, 0x38, 0x58, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00,
  0x00, 0x47, 0x00, 0x00, 0x41, 0x4c, 0x50, 0x48, 0x7d, 0x02, 0x00, 0x00, 0x01,
  0x80, 0x55, 0x6d, 0x5b, 0x10, 0xe9, 0x8b, 0xf0, 0x37, 0x98, 0xbf, 0xc1, 0xd2,
  0x40, 0x1a, 0x8c, 0x0d, 0xb4, 0x81, 0x36, 0xc0, 0x06, 0x6c, 0x03, 0xb6, 0x81,
  0x11, 0x88, 0x60, 0x84, 0x3f, 0x02, 0x11, 0xbe, 0x0b, 0xd0, 0x41, 0xe7, 0x6e,
  0xaf, 0x22, 0x62, 0x02, 0xf0, 0x4f, 0x5a, 0x01, 0x68, 0x12, 0x00, 0xfa, 0x5d,
  0xca, 0x0d, 0x48, 0xdc, 0x81, 0x8d, 0xfe, 0x6b, 0xd6, 0x09, 0x48, 0xe4, 0xa6,
  0x24, 0xfd, 0x46, 0x46, 0x60, 0x8d, 0x5f, 0x41, 0x26, 0x67, 0xbc, 0x5a, 0xdc,
  0x1f, 0x29, 0x4f, 0x1b, 0x01, 0xc7, 0xbe, 0x0e, 0x32, 0xca, 0x83, 0x46, 0xda,
  0xf6, 0x7b, 0x61, 0xc4, 0x7a, 0x21, 0x6e, 0x85, 0xd3, 0x83, 0x3c, 0x2f, 0x1b,
  0x80, 0x0b, 0xf5, 0x63, 0x9c, 0x5c, 0xb2, 0x68, 0x5c, 0xb1, 0xd2, 0xd2, 0x71,
  0x61, 0x80, 0xb8, 0x27, 0x28, 0x99, 0x73, 0xab, 0x84, 0x17, 0xa0, 0x46, 0xd2,
  0x14, 0xd0, 0x60, 0x2d, 0xcb, 0xa4, 0x7b, 0x00, 0x0a, 0xdb, 0x25, 0x08, 0x6a,
  0x2d, 0x34, 0x45, 0x73, 0xb6, 0xaa, 0xc6, 0x13, 0x73, 0x6b, 0x17, 0x9c, 0xea,
  0x22, 0x38, 0xd5, 0xd4, 0xca, 0xf7, 0xcd, 0xb3, 0x3f, 0x1a, 0x0b, 0x7a, 0xaf,
  0x8d, 0x63, 0x9c, 0x47, 0xb9, 0xc5, 0xf1, 0x74, 0x42, 0x7f, 0x57, 0xd8, 0x7e,
  0xdf, 0x02, 0x6b, 0x1d, 0xa1, 0xeb, 0xa8, 0x15, 0x7c, 0xcb, 0x70, 0x6f, 0x68,
  0x75, 0xcf, 0x0a, 0x00, 0x6b, 0x63, 0xb9, 0x45, 0xdc, 0xef, 0x4d, 0xe4, 0x06,
  0x00, 0x7b, 0x95, 0xbc, 0xf4, 0x0b, 0x7c, 0xe2, 0x0a, 0x40, 0x0a, 0x9b, 0x7b,
  0xb7, 0xf1, 0x11, 0x45, 0x00, 0x65, 0x7b, 0xea, 0x86, 0xf8, 0x04, 0x06, 0x20,
  0xb5, 0x12, 0xfa, 0x3b, 0xf2, 0x10, 0x35, 0x2e, 0x53, 0x3a, 0x4b, 0xa1, 0x99,
  0x2e, 0x24, 0x28, 0xed, 0xc7, 0x19, 0xe9, 0xba, 0xf9, 0x58, 0xc8, 0x09, 0x88,
  0x5c, 0x30, 0x9f, 0x0d, 0x68, 0xfb, 0x2b, 0x33, 0x17, 0x20, 0x90, 0x25, 0xf9,
  0x3e, 0xc2, 0x7a, 0x87, 0x18, 0xf7, 0x2b, 0xee, 0x04, 0x67, 0x13, 0x32, 0x33,
  0x70, 0xb0, 0x7e, 0x75, 0x41, 0xa8, 0x58, 0x0a, 0x8b, 0xbb, 0xf2, 0x6a, 0xc9,
  0xef, 0x89, 0x01, 0x2b, 0x69, 0x85, 0x75, 0x40, 0xe7, 0xb5, 0x62, 0x9e, 0x80,
  0x2b, 0xd6, 0x2c, 0x3c, 0x35, 0x05, 0xa0, 0xc1, 0x58, 0x2f, 0xe8, 0xed, 0xab,
  0x88, 0xfa, 0xc2, 0xa7, 0xa6, 0x68, 0xc7, 0x6a, 0xea, 0x24, 0xbf, 0xac, 0xa7,
  0x7b, 0x1c, 0x4e, 0xe7, 0x8a, 0x49, 0xbb, 0x44, 0x3e, 0xc1, 0xf4, 0x03, 0xa6,
  0x2e, 0x1a, 0x1b, 0xcb, 0x3d, 0xb4, 0x86, 0xfa, 0xd8, 0x88, 0xd2, 0x05, 0xd0,
  0x2a, 0x7c, 0xb2, 0x0c, 0x75, 0x3a, 0xa3, 0xaf, 0x12, 0x9b, 0x03, 0x7a, 0x6f,
  0x55, 0xfa, 0x64, 0x40, 0x73, 0x3d, 0x4b, 0xd5, 0xde, 0xda, 0x7a, 0x6d, 0xac,
  0xed, 0x93, 0x57, 0x0b, 0xe5, 0xc4, 0x00, 0x88, 0xb5, 0xb8, 0xf5, 0x51, 0xb6,
  0x43, 0xbd, 0x9f, 0xbd, 0xbd, 0xf7, 0x1e, 0xc0, 0x7e, 0xc2, 0x34, 0x2f, 0x07,
  0xcf, 0xa5, 0x0b, 0x34, 0x59, 0xd5, 0x15, 0xc0, 0x72, 0x76, 0xb5, 0xc4, 0x01,
  0xbd, 0xf5, 0x0e, 0xdf, 0xc3, 0xa1, 0x7f, 0xba, 0x43, 0x7a, 0xec, 0xfd, 0x66,
  0xde, 0x81, 0xdc, 0x81, 0x6b, 0xb7, 0xf5, 0x1e, 0xb5, 0x0e, 0xb1, 0x1b, 0xe0,
  0x62, 0x23, 0xa7, 0x4f, 0x2b, 0x68, 0x4c, 0xed, 0xdc, 0x88, 0x4e, 0x70, 0xe7,
  0xdc, 0x02, 0x00, 0x41, 0xf7, 0xbd, 0x11, 0x70, 0xaf, 0x35, 0xb8, 0xc7, 0x5c,
  0xb8, 0x76, 0xd8, 0x78, 0xec, 0xcb, 0x1f, 0x9b, 0x45, 0x6e, 0x19, 0x79, 0x5e,
  0xc8, 0xa3, 0x83, 0xf1, 0xf2, 0xfb, 0x16, 0xbc, 0x87, 0x61, 0xaf, 0x76, 0xd1,
  0xa3, 0xc8, 0x47, 0x4a, 0x13, 0xb5, 0xea, 0x18, 0x86, 0xb7, 0xdc, 0x03, 0x20,
  0x57, 0x13, 0x10, 0xe8, 0x3e, 0x1a, 0xb9, 0x00, 0xa1, 0xca, 0x78, 0x62, 0xa9,
  0x0e, 0x55, 0x63, 0xfc, 0x28, 0x31, 0x8b, 0x58, 0x45, 0x79, 0x80, 0xb2, 0xe4,
  0xcc, 0xb6, 0x45, 0x7f, 0xc1, 0x6f, 0x85, 0x64, 0x29, 0x64, 0xce, 0x85, 0xee,
  0x01, 0x10, 0xc0, 0x9f, 0xd4, 0x79, 0x4f, 0x21, 0xa5, 0xa3, 0xf0, 0xe2, 0x1b,
  0x78, 0xe1, 0xa1, 0xd7, 0x7a, 0x4e, 0x78, 0xee, 0xc8, 0x12, 0x62, 0xa7, 0x38,
  0x1b, 0xdf, 0x0f, 0xc2, 0x00, 0x68, 0xa7, 0x01, 0x78, 0xcb, 0x93, 0x00, 0x08,
  0x19, 0x5f, 0xe5, 0x92, 0x69, 0x24, 0x05, 0x5f, 0x18, 0x26, 0x20, 0x90, 0xc1,
  0x93, 0xfc, 0x99, 0xc9, 0x04, 0xcc, 0x0b, 0xbe, 0xd5, 0x33, 0x00, 0x91, 0x09,
  0x08, 0x1c, 0xf0, 0xd5, 0x02, 0x40, 0xa2, 0x02, 0x10, 0xfc, 0xb7, 0x07, 0x00,
  0x56, 0x50, 0x38, 0x20, 0x34, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x9d, 0x01,
  0x2a, 0x48, 0x00, 0x48, 0x00, 0x3e, 0x91, 0x48, 0xa1, 0x4c, 0xa5, 0xa4, 0x23,
  0x22, 0x21, 0x48, 0x00, 0xb0, 0x12, 0x09, 0x69, 0x00, 0x00, 0x09, 0xf1, 0xa3,
  0x46, 0x8d, 0x1a, 0x34, 0x68, 0xd1, 0xa3, 0x46, 0x7e, 0x00, 0x00, 0xfe, 0xf8,
  0xce, 0xf1, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
]);

Deno.bench("webp_to_png", async () => {
  await webp_to_png(webp_data);
});

Deno.bench("sharp_webp_to_png", async () => {
  await sharp_webp_to_png(webp_data);
});
